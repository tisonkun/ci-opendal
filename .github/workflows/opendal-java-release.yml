# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Release OpenDAL Java

on:
  push:
    branches:
      - try-release
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Version of OpenDAL Java to release
        required: true
      ref:
        type: string
        description: Git ref to of the version to release
        default: 'main'

jobs:
  stage-snapshot:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          classifier: linux-x86_64
        - os: windows-latest
          classifier: windows-x86_64
        - os: macos-latest
          classifier: osx-x86_64
        - os: macos-latest
          classifier: osx-aarch_64
    steps:
      - uses: actions/checkout@v3
        with:
          repository: apache/incubator-opendal
          ref: ${{ inputs.ref }}
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Local staging
        working-directory: bindings/java
        run: |
          mvn org.codehaus.mojo:versions-maven-plugin:set -DnewVersion=${{ inputs.version || '0.1.0'  }}
          mvn -Papache-release package verify org.sonatype.plugins:nexus-staging-maven-plugin:deploy -DjniClassifier=${{ matrix.classifier }} -DskipTests=true -DaltStagingDirectory=local-staging -DskipRemoteStaging=true "-DserverId=apache.releases.https" "-DnexusUrl=https://repository.apache.org"
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      - name: Upload local staging directory
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.classifier }}-local-staging
          path: bindings/java/local-staging
          if-no-files-found: error

  deploy-staged-snapshots:
    runs-on: ubuntu-latest
    needs: [stage-snapshot]
    steps:
      - uses: actions/checkout@v3
        with:
          repository: apache/incubator-opendal
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
          server-id: apache.releases.https
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Prepare enviroment variables
        run: echo "LOCAL_STAGING_DIR=$HOME/local-staging" >> $GITHUB_ENV

      - name: Download windows staging directory
        uses: actions/download-artifact@v3
        with:
          name: windows-x86_64-local-staging
          path: ~/windows-x86_64-local-staging
      - name: Download linux staging directory
        uses: actions/download-artifact@v3
        with:
          name: linux-x86_64-local-staging
          path: ~/linux-x86_64-local-staging
      - name: Download darwin staging directory
        uses: actions/download-artifact@v3
        with:
          name: osx-x86_64-local-staging
          path: ~/osx-x86_64-local-staging
      - name: Download darwin (aarch64) staging directory
        uses: actions/download-artifact@v3
        with:
          name: osx-aarch_64-local-staging
          path: ~/osx-aarch_64-local-staging

      - name: Merge staging repositories
        run: |
          mkdir -p ~/local-staging/deferred
          cat ~/windows-x86_64-local-staging/deferred/.index >>  ~/local-staging/deferred/.index
          cp -r ~/windows-x86_64-local-staging/deferred/* ~/local-staging/deferred/
          cat ~/linux-x86_64-local-staging/deferred/.index >>  ~/local-staging/deferred/.index
          cp -r ~/linux-x86_64-local-staging/deferred/* ~/local-staging/deferred/
          cat ~/osx-x86_64-local-staging/deferred/.index >>  ~/local-staging/deferred/.index
          cp -r ~/osx-x86_64-local-staging/deferred/* ~/local-staging/deferred/
          cat ~/osx-aarch_64-local-staging/deferred/.index >>  ~/local-staging/deferred/.index
          cp -r ~/osx-aarch_64-local-staging/deferred/* ~/local-staging/deferred/

      - name: Deploy local staged artifacts
        if: ${{ github.event_name != 'pull_request' }}
        working-directory: bindings/java
        run: mvn org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DaltStagingDirectory=$LOCAL_STAGING_DIR -DskipStagingRepositoryClose=true "-DserverId=apache.releases.https" "-DnexusUrl=https://repository.apache.org"
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
